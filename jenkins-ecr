pipeline {
    agent {
     kubernetes {
       yamlFile 'AgentPod.yaml'
         }
    }
    environment{
        AI_RESEARCH_SAAMA = '381743254372'
        LSACONE_DEV = '791532114280'
        SDQ_SAM = '351054065682'
    }
    parameters {
        choice(name: 'SOURCE_AWS_ACCOUNT', choices:'ai-research-saama\nlsacone-dev\nsdq-sam', description:'Select Source AWS Account')
        string(
            name: 'Source_AWS_Region',
            description: "mention the Source aws account region which will be as 'ap-south-1' "
        )
        string(
            name: 'Source_ECR_Repo',
            description: "mention the Source aws ecr repo name which will be as 'sam-kt-ecr' "
        )
        string(
            name: 'Source_Image_Tag',
            description: "mention the Source aws Image Tag which will be as 'tag-213-23234-3' "
        )        
        choice(name: 'DESTINATION_AWS_ACCOUNT', choices:'ai-research-saama\nlsacone-dev\nsdq-sam', description:'Select Destination AWS Account')
        string(
            name: 'Destination_AWS_Region',
            description: "mention the Destination aws account region which will be as 'ap-south-1' "
        )
        string(
            name: 'Destination_ECR_Repo',
            description: "mention the Destination aws ecr repo name which will be as 'sam-kt-ecr' "
        )
        string(
            name: 'Destination_Image_Tag',
            description: "mention the Destination aws Image Tag which will be as 'tag-213-23234-3' "
        )             
    }
    stages{
        stage('Pull Source Image'){
            steps{
                container('swashikan'){
                    script{
                        if (params.SOURCE_AWS_ACCOUNT == 'lsacone-dev') {
                            withCredentials([[$class:
                            'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'app.jenkins.ecr-migration']]){
                            sh '''
                                    aws ecr get-login-password --region ${Source_AWS_Region} | podman login --username AWS --password-stdin ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                                    podman pull ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${id}
                                    echo ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${id} > test.txt
                                    unset AWS_ACCESS_KEY_ID
                                    unset AWS_SECRET_ACCESS_KEY                                                    
                            '''
                            }                       
                        } else if (params.SOURCE_AWS_ACCOUNT == 'ai-research-saama') {
                            withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'app.jenkins.ecr-migration',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            withAWS(roleAccount: '381743254372', role: 'arn:aws:iam::381743254372:role/app.jenkins.ecr-migration.role') {
                            sh '''
                                aws ecr get-login-password --region ${Source_AWS_Region} | podman login --username AWS --password-stdin ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                                podman pull ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag}
                                echo ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag} > test.txt
                                unset AWS_ACCESS_KEY_ID
                                unset AWS_SECRET_ACCESS_KEY 

                            '''
                            }
                        }
                        } else if (params.SOURCE_AWS_ACCOUNT == 'sdq-sam') {
                            withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'app.jenkins.ecr-migration',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            withAWS(roleAccount: '351054065682', role: 'arn:aws:iam::351054065682:role/app.jenkins.ecr-migration.role') {
                            sh '''
                                aws ecr get-login-password --region ${Source_AWS_Region} | podman login --username AWS --password-stdin ${SDQ_SAM}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                                podman pull ${SDQ_SAM}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag}
                                echo ${SDQ_SAM}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag} > test.txt
                                unset AWS_ACCESS_KEY_ID
                                unset AWS_SECRET_ACCESS_KEY 

                            '''
                            }
                        }
                        }
                    }
                }
            }
        }
        stage('Push Destination Image'){
            steps{
                container('swashikan'){
                    script{
                        if (params.DESTINATION_AWS_ACCOUNT == 'lsacone-dev') {
                            withCredentials([[$class:
                            'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'app.jenkins.ecr-migration']]){
                            sh '''
                                    aws ecr describe-images --repository-name ${Destination_ECR_Repo} --region ${Destination_AWS_Region}  > new.txt
                                    podman tag $(cat test.txt) ${LSACONE_DEV}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                                    aws ecr get-login-password --region ${Destination_AWS_Region} | podman login --username AWS --password-stdin ${LSACONE_DEV}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com
                                    podman push ${LSACONE_DEV}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                                    podman image prune --all --force
                                    unset AWS_ACCESS_KEY_ID
                                    unset AWS_SECRET_ACCESS_KEY                   
                            '''
                            }                       
                        } else if (params.DESTINATION_AWS_ACCOUNT == 'ai-research-saama') {
                            withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'app.jenkins.ecr-migration',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            withAWS(roleAccount: '381743254372', role: 'arn:aws:iam::381743254372:role/app.jenkins.ecr-migration.role') {
                            sh '''                   
                                    podman tag $(cat test.txt) ${AI_RESEARCH_SAAMA}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                                    aws ecr get-login-password --region ${Destination_AWS_Region} | podman login --username AWS --password-stdin ${AI_RESEARCH_SAAMA}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com
                                    podman push ${AI_RESEARCH_SAAMA}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                                    podman image prune --all --force
                                    unset AWS_ACCESS_KEY_ID
                                    unset AWS_SECRET_ACCESS_KEY                      
                            '''
                            }
                        }
                        } else if (params.DESTINATION_AWS_ACCOUNT == 'sdq-sam') {
                            withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'app.jenkins.ecr-migration',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            withAWS(roleAccount: '351054065682', role: 'arn:aws:iam::351054065682:role/app.jenkins.ecr-migration.role') {
                            sh '''                   
                                    podman tag $(cat test.txt) ${SDQ_SAM}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                                    aws ecr get-login-password --region ${Destination_AWS_Region} | podman login --username AWS --password-stdin ${SDQ_SAM}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com
                                    podman push ${SDQ_SAM}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                                    podman image prune --all --force
                                    unset AWS_ACCESS_KEY_ID
                                    unset AWS_SECRET_ACCESS_KEY                      
                            '''
                            }
                        }
                        }
                    }
                }
            }
        }
    }       

}
