pipeline {
    agent any
    parameters {
        choice(name: 'SOURCE_AWS_ACCOUNT', choices:'ai-research-saama\nlsacone-dev', description:'Select Source AWS Account')
        string(
            name: 'Source_AWS_Region',
            description: "mention the Source aws account region which will be as 'ap-south-1' "
        )
        string(
            name: 'Source_ECR_Repo',
            description: "mention the Source aws ecr repo name which will be as 'sam-kt-ecr' "
        )
        string(
            name: 'Source_Image_Tag',
            description: "mention the Source aws Image Tag which will be as 'tag-213-23234-3' "
        )        
        choice(name: 'DESTINATION_AWS_ACCOUNT', choices:'ai-research-saama\nlsacone-dev', description:'Select Destination AWS Account')
        string(
            name: 'Destination_AWS_Region',
            description: "mention the Destination aws account region which will be as 'ap-south-1' "
        )
        string(
            name: 'Destination_ECR_Repo',
            description: "mention the Destination aws ecr repo name which will be as 'sam-kt-ecr' "
        )
        string(
            name: 'Destination_Image_Tag',
            description: "mention the Destination aws Image Tag which will be as 'tag-213-23234-3' "
        )             
    }
    environment{
        AI_RESEARCH_SAAMA = '381743254372'
        LSACONE_DEV = '791532114280'
    }
    stages{
        stage('Pull Source Image'){
            steps{
                script{
                    if (params.SOURCE_AWS_ACCOUNT == 'ai-research-saama') {
                        withCredentials([[$class:
                        'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'ai-research-saama']]){
                        sh '''
                            aws ecr get-login-password --region ${Source_AWS_Region} | docker login --username AWS --password-stdin ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                            docker pull ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag}
                            echo ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag} > test.txt
                            unset AWS_ACCESS_KEY_ID
                            unset AWS_SECRET_ACCESS_KEY 

                        '''
                        }
                    } else if (params.SOURCE_AWS_ACCOUNT == 'lsacone-dev') {
                         withCredentials([[$class:
                        'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'lsacone-dev']]){
                        sh '''
                            aws ecr get-login-password --region ${Source_AWS_Region} | docker login --username AWS --password-stdin ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                            docker pull ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag}
                            echo ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com/${Source_ECR_Repo}:${Source_Image_Tag} > test.txt
                            unset AWS_ACCESS_KEY_ID
                            unset AWS_SECRET_ACCESS_KEY                        
                        '''
                        }                       
                    }
                }
            }
        }
        stage('Push Destination Image'){
            steps{
                script{
                    if (params.DESTINATION_AWS_ACCOUNT == 'ai-research-saama') {
                        withCredentials([[$class:
                        'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'ai-research-saama']]){
                        sh '''
                            docker tag $(cat test.txt) ${AI_RESEARCH_SAAMA}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                            aws ecr get-login-password --region ${Source_AWS_Region} | docker login --username AWS --password-stdin ${AI_RESEARCH_SAAMA}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                            docker push ${AI_RESEARCH_SAAMA}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                            docker rmi ${AI_RESEARCH_SAAMA}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                            unset AWS_ACCESS_KEY_ID
                            unset AWS_SECRET_ACCESS_KEY                        
                        '''
                        }
                    } else if (params.DESTINATION_AWS_ACCOUNT == 'lsacone-dev') {
                         withCredentials([[$class:
                        'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'lsacone-dev']]){
                        sh '''
                            docker tag $(cat test.txt) ${LSACONE_DEV}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                            aws ecr get-login-password --region ${Source_AWS_Region} | docker login --username AWS --password-stdin ${LSACONE_DEV}.dkr.ecr.${Source_AWS_Region}.amazonaws.com
                            docker push ${LSACONE_DEV}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                            docker rmi ${LSACONE_DEV}.dkr.ecr.${Destination_AWS_Region}.amazonaws.com/${Destination_ECR_Repo}:${Destination_Image_Tag}
                            unset AWS_ACCESS_KEY_ID
                            unset AWS_SECRET_ACCESS_KEY                        
                        '''
                        }                       
                    }
                }
            }
        }
    }       
}
