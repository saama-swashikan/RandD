

podTemplate(
    containers: [
        containerTemplate(
            name: 'sch-code-builder',
            image: '791532114280.dkr.ecr.us-east-1.amazonaws.com/sch-build-agent:sch-sit2-terragrunt',
            command: 'cat',
            ttyEnabled: true,
            resourceLimitEphemeralStorage: '10Gi',
            resourceLimitMemory: '16Gi'
        )
    ],
    volumes: [
        dynamicPVC(
            requestsSize : '500Gi',
            mountPath: '/var/lib/containers/storage/vfs'
        )
    ],
    envVars: [
        envVar(key: 'source_aws_account', value: '791532114280'),
        envVar(key: 'dest_aws_account', value: '791532114280'),
        envVar(key: 'source_aws_repo', value: 'dh-sit5'),
        envVar(key: 'dest_aws_repo', value: 'dh-sit3'),
        envVar(key: 'fnf_url', value: 'signin.sit5.lsacone.com'),
        envVar(key: 'dh_url', value: 'dh.sit5.lsacone.com'),
        envVar(key: 'grant_type', value: 'client_credentials'),
        envVar(key: 'client_id', value: 'data-onboarding'),
        envVar(key: 'vars_file_location', value: 'ansible/inventory/sch-sit2/host_vars/k8s-masters/vars'),
        envVar(key: 'otb_s3_bucket', value: 'dh-otb-sit5'),
        envVar(key: 'source_automapper_s3_bucket', value: 'lsac-dev-sch'),
        envVar(key: 'dh_s3_bucket', value: 'lsac-sit5-dh'),
        envVar(key: 'dh_uat_s3_bucket', value: 'lsac-sit5-dh-uat'),
        envVar(key: 'vars_location', value: 'sch-tf-envs/terragrunt/live/lsacone-dev-sch-sit5'),
        envVar(key: 'cluster_name', value: 'lsac-sit5-dh'),
        envVar(key: 'master_namespace', value: 'dh-sit5'),
        envVar(key: 'git_user', value: 'comprehend-bot'),
        envVar(key: 'primary_tenant', value: 'dh-sit3'),
        envVar(key: 'sch_tf_envs_branch', value: 'feature/SRE-10177'),
        envVar(key: 'src_git_user', value: 'comprehend-jenkins'),
        envVar(key: 'dest_git_user', value: 'comprehend-jenkins'),
        envVar(key: 'automapper_src_repo', value: 'airflow-dags-lsac-sit3-dh'),
        envVar(key: 'automapper_dest_repo', value: 'airflow-dags-lsac-sit5-dh'),
        envVar(key: 'automapper_git_src_branch', value: 'main'),
        envVar(key: 'automapper_git_dest_branch', value: 'main'),
        envVar(key: 'ecr_role', value: 'Jenkins-ECR-Role'),
        envVar(key: 'terragrunt_role', value: 'LSACAdministratorsAccess'),
        envVar(key: 'src_region', value: 'us-east-1'),
        envVar(key: 'dest_region', value: 'us-east-1'),
        envVar(key: 'rds_prefix', value: 'lsac-sit5-dh')
    ]
) 
{
    properties([
        parameters([
            extendedChoice(name: 'Components', multiSelectDelimiter: ',', quoteValue: false, 
                           type: 'PT_CHECKBOX', 
                           description: 'Select the Component', 
                           visibleItemCount: 22,
                           groovyScript: '''
                return ['PreRequisites', 'ApiDB', 'Docs', 'Redis', 'Aws-Cli-Unzip', 'SysAdmin', 'StudyAdmin', 'Python', 'Pyspark', 'PdaGateway', 'Transform', 'TransformApi', 'RawThirdParty', 'PdaDb', 'DQ', 'PdaHome', 'PdaNotifications', 'StudyTransform', 'Scale', 'Automaps-Inference-Image', 'Outbound', 'TerragruntApply', 'RedisRestart', 'init-all-api-Trigger', 'AutoMapper', 'GlobalFiles','OTB','Automaps-Inference-S3-Upload','dh-sanity-checks']
           '''
            ),
            string(name: 'JiraIssueKey', defaultValue: 'SRE-9866', description: 'Enter Jira Ticket ID, eg: SRE-9866'),
            string(name: 'jira_comment', defaultValue: 'yes', description: 'Jira comment required or not, eg: yes/no'),
            string(name: 'jenkins_url', defaultValue: 'https://jenkins.dev.lsacone.com/job/SCH/job/DH-SIT3/', description: 'Jenkins job url, eg: https://jenkins.dev.lsacone.com/job/SCH/job/DH-SIT3/')
        ])
    ])
    node(POD_LABEL) {
        stage('Select Components') {
                container('sch-code-builder'){
                script {
                    def selectedComponents = params.Components.split(',')
                    echo "Selected components: ${selectedComponents.join(', ')}"
                    // You can add any common setup logic here
                }
            } 
        }
        stage('Read User Input') {
            container('sch-code-builder'){ 
                script {
                    // Access the selected components from the 'Components' parameter
                    def selectedComponents = params.Components.split(',')
                    // Load the remaining user input from a file
                    def uploadedFile = 'uploaded_file.txt'
                    def fileBase64 = input message: 'Please provide a file', parameters: [base64File('file')]
                    sh "set +x; echo '$fileBase64' | base64 -d > ./uploaded_file.txt"
                    sh 'export $(cat ./uploaded_file.txt)'
                    archiveArtifacts uploadedFile
                    sh 'ls -lah'
                    sh 'pwd'
                }
            }
        }
       
        stage('Pull and Push Redis and SysAdmin image') {
            script {
                if ( params.Components.contains('ApiDB') || params.Components.contains('Docs') || params.Components.contains('Redis') || params.Components.contains('SysAdmin') || params.Components.contains('StudyAdmin') || params.Components.contains('Python') || params.Components.contains('Pyspark') || params.Components.contains('PdaGateway') || params.Components.contains('Transform') || params.Components.contains('TransformApi') || params.Components.contains('RawThirdParty') || params.Components.contains('PdaDb') || params.Components.contains('DQ') || params.Components.contains('PdaHome') || params.Components.contains('PdaNotifications') || params.Components.contains('StudyTransform') || params.Components.contains('Scale') || params.Components.contains('Automaps-Inference-Image') || params.Components.contains('Outbound') || params.Components.contains('Migration-image') || params.Components.contains('GMR') ) {
                    container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials

                        withAWS(role:env.ecr_role, roleAccount:env.source_aws_account, region:env.src_region) { 
                            if ( params.Components.contains('ApiDB') ) {
                                def image_name = sh(script: '''
                                    i=api_db; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Docs') ) {
                                def image_name = sh(script: '''
                                    i=docs; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Redis') ) {
                                def image_name = sh(script: '''
                                    i=redis; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('SysAdmin') ) {
                                def image_name = sh(script: '''
                                    i=sys_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('StudyAdmin') ) {
                                def image_name = sh(script: '''
                                    i=study_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Python') ) {
                                def image_name = sh(script: '''
                                    i=python_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Pyspark') ) {
                                def image_name = sh(script: '''
                                    i=pyspark_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('PdaGateway') ) {
                                def image_name = sh(script: '''
                                    i=gateway_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Transform') ) {
                                def image_name = sh(script: '''
                                    i=sch_unified_cm; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('TransformApi') ) {
                                def image_name = sh(script: '''
                                    i=map_preview; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('RawThirdParty') ) {
                                def image_name = sh(script: '''
                                    i=raw_thirdparty_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('PdaDb') ) {
                                def image_name = sh(script: '''
                                    i=db_admin; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('DQ') ) {
                                def image_name = sh(script: '''
                                    i=dq; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('PdaHome') ) {
                                def image_name = sh(script: '''
                                    i=home; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('PdaNotifications') ) {
                                def image_name = sh(script: '''
                                    i=notification; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('StudyTransform') ) {
                                def image_name = sh(script: '''
                                    i=transform; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Scale') ) {
                                def image_name = sh(script: '''
                                    i=dynamicdag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Automaps-Inference-Image') ) {
                                def image_name = sh(script: '''
                                    i=automap_inference_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Outbound') ) {
                                def image_name = sh(script: '''
                                    i=outbound_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('Migration-image') ) {
                                def image_name = sh(script: '''
                                    i=migration_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                            if ( params.Components.contains('GMR') ) {
                                def image_name = sh(script: '''
                                    i=gmr_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                ''', returnStdout: true).trim()
                                pull_image(image_name)  
                            }
                        }

                        withAWS(role:env.ecr_role, roleAccount:env.dest_aws_account, region:env.dest_region) {
                            withCredentials([string(credentialsId: 'comprehend-bot-github-token', variable: 'git_token'),string(credentialsId: 'jenkins_cred_text', variable: 'jenkins_cred_text')]) {      
                                if ( params.Components.contains('ApiDB') ) {
                                    def image_name = sh(script: '''
                                        i=api_db; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_API_DB"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Docs') ) {
                                    def image_name = sh(script: '''
                                        i=docs; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Docs"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Redis') ) {
                                    def image_name = sh(script: '''
                                        i=redis; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Redis"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('SysAdmin') ) {
                                    def image_name = sh(script: '''
                                        i=sys_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_SYS"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('StudyAdmin') ) {
                                    def image_name = sh(script: '''
                                        i=study_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Study"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Python') ) {
                                    def image_name = sh(script: '''
                                        i=python_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Python"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Pyspark') ) {
                                    def image_name = sh(script: '''
                                        i=pyspark_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_PySpark"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('PdaGateway') ) {
                                    def image_name = sh(script: '''
                                        i=gateway_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_PdaGateway"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Transform') ) {
                                    def image_name = sh(script: '''
                                        i=sch_unified_cm; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Transform"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('TransformApi') ) {
                                    def image_name = sh(script: '''
                                        i=map_preview; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_TransformApi"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('RawThirdParty') ) {
                                    def image_name = sh(script: '''
                                        i=raw_thirdparty_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_RawThirdParty"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('PdaDb') ) {
                                    def image_name = sh(script: '''
                                        i=db_admin; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_PdaDB"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('DQ') ) {
                                    def image_name = sh(script: '''
                                        i=dq; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_DQ"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('PdaHome') ) {
                                    def image_name = sh(script: '''
                                        i=home; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_PdaHome"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('PdaNotifications') ) {
                                    def image_name = sh(script: '''
                                        i=notification; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_PdaNotifications"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('StudyTransform') ) {
                                    def image_name = sh(script: '''
                                        i=transform; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_StudyTransform"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Scale') ) {
                                    def image_name = sh(script: '''
                                        i=dynamicdag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Scale"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Automaps-Inference-Image') ) {
                                    def image_name = sh(script: '''
                                        i=automap_inference_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Automaps_Inference"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Outbound') ) {
                                    def image_name = sh(script: '''
                                        i=outbound_tag; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_OutBound"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('Migration-image') ) {
                                    def image_name = sh(script: '''
                                        i=migration_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_Migration"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                                if ( params.Components.contains('GMR') ) {
                                    def image_name = sh(script: '''
                                        i=gmr_image; cat uploaded_file.txt | grep ^$i= | cut -d'=' -f2; 
                                    ''', returnStdout: true).trim()
                                    def date = sh(script: "date +%Y_%m_%d-%H%M", returnStdout: true).trim()
                                    push_image(image_name,date)
                                    def stage_name = "Image_Migration_GMR"
                                    if (params.jira_comment == "yes") {
                                        post_to_jira(stage_name)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }   
}

def pull_image(image_name) {
echo "$image_name"
  sh """
    aws ecr get-login-password --region ${src_region} | podman login --username AWS --password-stdin ${source_aws_account}.dkr.ecr.${src_region}.amazonaws.com
    podman pull ${source_aws_account}.dkr.ecr.${src_region}.amazonaws.com/${source_aws_repo}:${image_name}  
    podman tag ${source_aws_account}.dkr.ecr.${src_region}.amazonaws.com/${source_aws_repo}:${image_name} ${source_aws_account}.dkr.ecr.${src_region}.amazonaws.com/${source_aws_repo}:${image_name}-new  
  """
}

def push_image(image_name,date) {
echo "$image_name"
echo "$date"
  sh """
    aws ecr get-login-password --region ${dest_region} | podman login --username AWS --password-stdin ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com
    aws ecr describe-images --repository-name ${dest_aws_repo} --region ${dest_region}  > image_tag.txt
    if grep -q "$image_name" image_tag.txt; 
    then 
        aws ecr get-login-password --region ${dest_region} | podman login --username AWS --password-stdin ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com   
        podman pull ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name
        podman tag ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name-backup-${date}
        podman push ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name-backup-${date}
        aws ecr batch-delete-image --repository-name ${dest_aws_repo} --image-ids imageTag=$image_name
        podman tag ${source_aws_account}.dkr.ecr.${src_region}.amazonaws.com/${source_aws_repo}:$image_name-new ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name  
        podman push ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name
    else
        podman tag ${source_aws_account}.dkr.ecr.${src_region}.amazonaws.com/${source_aws_repo}:$image_name-new ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name  
        aws ecr get-login-password --region ${dest_region} | podman login --username AWS --password-stdin ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com   
        podman push ${dest_aws_account}.dkr.ecr.${dest_region}.amazonaws.com/${dest_aws_repo}:$image_name        
        podman image prune --all --force
    fi  
  """

}

def post_to_jira(stage_name){

  def jira_name = "${jira_names}"
                    def jenkins_url = "${params.jenkins_url}"                    
                    echo "$jira_name"
                    echo "$jenkins_url"
                    echo "$stage_name"
                    echo "url: ${jenkins_url}"

                    sh """
                        echo sh_jira: $jira_name
                        #jenkins_url="\$(echo $jenkins_url | sed -e 's|http://|https://|g')"
                        echo $jenkins_url > url.txt
                        cat url.txt | sed -e 's|http://|https://|g' > url_1.txt
                        cat url_1.txt              
                        ls -la
                        curl -s -k -u "$jenkins_cred_text" --request GET "\$(cat url_1.txt)"${BUILD_NUMBER}/consoleText > ${BUILD_NUMBER}_${stage_name}_${Textfile}
                        # echo "curl -s -k -u "\$(cat test.txt)" --request GET ${jenkins_url}${BUILD_NUMBER}/consoleText > ${BUILD_NUMBER}_${stage_name}_${Textfile}"
                        #curl -s -k -u "\$(cat test.txt)" --request GET ${jenkins_url}${BUILD_NUMBER}/consoleText > ${BUILD_NUMBER}_${stage_name}_${Textfile}
                        echo hi
                        ls -la
                    """
                    
                    def attachment = jiraUploadAttachment idOrKey: "${params.JiraIssueKey}", file: "${BUILD_NUMBER}_${stage_name}_${Textfile}", site: "${jira_name}"
                    def commentBody = "${stage_name} stage completed. \n Log attached for the reference. \n Filename is *${BUILD_NUMBER}_${stage_name}_${Textfile}* \n Build_details: ${params.jenkins_url}"
                    def commentWithAttachment = jiraAddComment comment: commentBody, idOrKey: "${params.JiraIssueKey}", attachments: [attachment], site: "${jira_name}"
                    echo commentWithAttachment.data.toString()
}

