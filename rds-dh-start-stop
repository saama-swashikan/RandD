podTemplate(
    containers: [
        containerTemplate(
            name: 'sch-code-builder',
            image: '791532114280.dkr.ecr.us-east-1.amazonaws.com/sch-build-agent:sch-sit2-terragrunt',
            command: 'cat',
            ttyEnabled: true,
            resourceLimitEphemeralStorage: '10Gi',
            resourceLimitMemory: '16Gi'
        )
    ],
    volumes: [
        dynamicPVC(
            requestsSize : '50Gi',
            mountPath: '/var/lib/containers/storage/vfs'
        )
    ],
    envVars: [
        envVar(key: 'Dev', value: 'swashikan'),
        envVar(key: 'Dev2', value: 'lsac-dev-sch-master-test lsac-dev-sch-alpha-analytics'),
        envVar(key: 'Dev3', value: 'swashikan Dev3'),
        envVar(key: 'Sit', value: 'swashikan Sit'),
        envVar(key: 'Sit2', value: 'swashikan Sit2'),
        envVar(key: 'Sit3', value: 'swashikan Sit3'),
        envVar(key: 'Poc', value: 'swashikan Poc'),
        envVar(key: 'Rtest', value: 'swashikan Rtest')

    ]
) 
{

    properties([
        parameters([
            choice(
            name: 'Environments', 
            choices: ['Dev','Dev2'],
            description: 'Select the Environment'
            ),
            choice(
            name: 'Components', 
            choices: ['Status', 'Start', 'Stop'],
            description: 'Select the State of Instances'
            )

        ])
    ])
    node(POD_LABEL) {
stage('Status of RDS Instances') {


                script {
                    if (params.Components.contains('Status') ) {
container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'aws_jenkins_dev', // Replace with your AWS credentials ID
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    switch(params.Environments) {
                        case "Dev": sh "set +x; echo $Dev > rds "; break
                        case "Dev2": sh "set +x; echo $Dev2 > rds "; break
                        case "Dev3": sh "set +x; echo $Dev2 > rds "; break
                        case "Sit": sh "set +x; echo $Sit > rds "; break
                        case "Sit2": sh "set +x; echo $Sit2 > rds "; break
                        case "Sit3": sh "set +x; echo $Sit3 > rds "; break
                        case "Poc": sh "set +x; echo $Poc > rds "; break
                        case "Rtest": sh "set +x; echo $Rtest > rds "; break
                    }
                        sh '''
                            set +x
                            boldon=`tput smso`
                            boldoff=`tput rmso`
                            echo " "
                            echo "The Environment Selected is ${boldon}${Environments}${boldoff}"
                            echo " "
                            for i in `cat rds`; do
                                status=`aws rds describe-db-instances --db-instance-identifier $i --query 'DBInstances[].[DBInstanceStatus]' --output text`
                            echo "RDS ${boldon}${i}${boldoff} is in ${boldon}${status}${boldoff} State"
                            echo " "                            
                            done
                   '''
                    }
                }
             }
        }
}
stage('Starting RDS Instances') {


                script {
                    if (params.Components.contains('Start') ) {
container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'aws_jenkins_dev', // Replace with your AWS credentials ID
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    switch(params.Environments) {
                        case "Dev": sh "set +x; echo $Dev > rds "; break
                        case "Dev2": sh "set +x; echo $Dev2 > rds "; break
                        case "Dev3": sh "set +x; echo $Dev2 > rds "; break
                        case "Sit": sh "set +x; echo $Sit > rds "; break
                        case "Sit2": sh "set +x; echo $Sit2 > rds "; break
                        case "Sit3": sh "set +x; echo $Sit3 > rds "; break
                        case "Poc": sh "set +x; echo $Poc > rds "; break
                        case "Rtest": sh "set +x; echo $Rtest > rds "; break
                    }
                        sh '''
                            set +x
                            boldon=`tput smso`
                            boldoff=`tput rmso`
                            echo " "
                            echo "The Environment Selected is ${boldon}${Environments}${boldoff}"
                            echo " "
                            for i in `cat rds`; do
                                master=`aws rds describe-db-instances --db-instance-identifier $i --query 'DBInstances[].[DBInstanceIdentifier,DBInstanceStatus]' --output text | awk '{print $2}'`
                                if [ "$master" = "stopped" ]; then
                                    aws rds start-db-instance --db-instance-identifier $i --region us-east-1 2>&1 > /dev/null
                                    echo "RDS ${boldon}${i}${boldoff} is ${boldon}Started${boldoff}. Previously, Which was in ${master} State."
                                    echo " "
                                else
                                    echo "RDS ${boldon}${i}${boldoff} is in ${boldon}${master}${boldoff} State, Needed to be Stopped Before Starting Up."
                                    echo " "
                                fi
                            done
                   '''
                    }
                }
             }
        }
}

stage('Stopping RDS Instances') {


                script {
                    if (params.Components.contains('Stop')) {
container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'aws_jenkins_dev', // Replace with your AWS credentials ID
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    switch(params.Environments) {
                        case "Dev": sh "set +x; echo $Dev > rds "; break
                        case "Dev2": sh "set +x; echo $Dev2 > rds "; break
                        case "Dev3": sh "set +x; echo $Dev2 > rds "; break
                        case "Sit": sh "set +x; echo $Sit > rds "; break
                        case "Sit2": sh "set +x; echo $Sit2 > rds "; break
                        case "Sit3": sh "set +x; echo $Sit3 > rds "; break
                        case "Poc": sh "set +x; echo $Poc > rds "; break
                        case "Rtest": sh "set +x; echo $Rtest > rds "; break
                    }
                        sh '''
                            set +x
                            boldon=`tput smso`
                            boldoff=`tput rmso`
                            echo " "
                            echo "The Environment Selected is ${boldon}${Environments}${boldoff}"
                            echo " "
                            for i in `cat rds`; do
                                master=`aws rds describe-db-instances --db-instance-identifier $i --query 'DBInstances[].[DBInstanceIdentifier,DBInstanceStatus]' --output text | awk '{print $2}'`
    
                                if [ "$master" = "available" ]; then
                                    aws rds stop-db-instance --db-instance-identifier $i --region us-east-1 2>&1 > /dev/null
                                    echo "RDS ${boldon}${i}${boldoff} is ${boldon}Stopped${boldoff}. Previously, Which was in ${master} State."
                                    echo " "
                                else
                                    echo "RDS ${boldon}${i}${boldoff} is in ${boldon}${master}${boldoff} State, Needed to be Available Before Shutting Down."
                                    echo " "
                                fi
                            done
                   '''
                    }
                }
             }
        }
}
}
}
