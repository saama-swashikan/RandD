podTemplate(
    containers: [
        containerTemplate(
            name: 'sch-code-builder',
            image: '791532114280.dkr.ecr.us-east-1.amazonaws.com/sch-build-agent:sch-sit2-terragrunt',
            command: 'cat',
            ttyEnabled: true,
            resourceLimitEphemeralStorage: '10Gi',
            resourceLimitMemory: '16Gi'
        )
    ],
    volumes: [
        dynamicPVC(
            requestsSize : '50Gi',
            mountPath: '/var/lib/containers/storage/vfs'
        )
    ],
    envVars: [
        envVar(key: 'Dev', value: 'lsacone-dev-sch'),
        envVar(key: 'Dev2', value: 'lsac-dev-sch-master-test lsac-dev-sch-alpha-analytics'),
        envVar(key: 'Dev3', value: 'lsac-dev3-dh-master lsac-dev3-dh-tenants'),
        envVar(key: 'Sit', value: 'lsac-sit-sch lsac-sit-cs-tenant'),
        envVar(key: 'Sit2', value: 'sch-sit2-rds sch-sit-tenant-two'),
        envVar(key: 'Sit3', value: 'lsac-sit3-dh-master lsac-sit3-dh-tenants'),
        envVar(key: 'Poc', value: 'dh-dev-poc'),
        envVar(key: 'Rtest', value: 'sit-23r2-rtest-sch')

    ]
) 
{

    properties([
        parameters([
            choice(
            name: 'Environments', 
            choices: ['Dev','Dev2','Dev3','Sit','Sit2','Sit3','Poc','Rtest'],
            description: 'Select the Environment'
            ),
            choice(
            name: 'Components', 
            choices: ['Status', 'Start', 'Stop'],
            description: 'Select the State of Instances'
            )

        ])
    ])
    node(POD_LABEL) {
stage('Status of RDS Instances') {


                script {
                    if (params.Components.contains('Status') ) {
container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'aws_jenkins_dev', // Replace with your AWS credentials ID
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) { 
                        withCredentials([string(credentialsId: 'swash_jenkins_token', variable: 'client_secret'),string(credentialsId: 'swash_jenkins_cred', variable: 'jenkins_cred_text')]) {
                    switch(params.Environments) {
                        case "Dev": sh "set +x; echo $Dev > rds "; break
                        case "Dev2": sh "set +x; echo $Dev2 > rds "; break
                        case "Dev3": sh "set +x; echo $Dev2 > rds "; break
                        case "Sit": sh "set +x; echo $Sit > rds "; break
                        case "Sit2": sh "set +x; echo $Sit2 > rds "; break
                        case "Sit3": sh "set +x; echo $Sit3 > rds "; break
                        case "Poc": sh "set +x; echo $Poc > rds "; break
                        case "Rtest": sh "set +x; echo $Rtest > rds "; break
                    } 
                        sh '''
                            set +x
                            boldon=`tput smso`
                            boldoff=`tput rmso`
                            echo " "
                            echo " "
                            echo "The Environment Selected to View Status is ${boldon}DH ${Environments}${boldoff}"
                            echo " "
                            echo " "
                            for i in `cat rds`; do
                                status=`aws rds describe-db-instances --db-instance-identifier $i --query 'DBInstances[].[DBInstanceStatus]' --output text`
                            echo "RDS ${boldon}${i}${boldoff} is in ${boldon}${status}${boldoff} State."
                            echo " "                            
                            done
                            echo " "
                            echo " "
                   '''
def stage_name = "Status"
def status = "new"
if (params.Components.contains('Status') ) {
post_to_jira(stage_name,status)
                            }
                    }
}
                }
             }
        }
}

stage('Starting RDS Instances') {


                script {
                    if (params.Components.contains('Start') ) {
container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'aws_jenkins_dev', // Replace with your AWS credentials ID
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    switch(params.Environments) {
                        case "Dev": sh "set +x; echo $Dev > rds "; break
                        case "Dev2": sh "set +x; echo $Dev2 > rds "; break
                        case "Dev3": sh "set +x; echo $Dev2 > rds "; break
                        case "Sit": sh "set +x; echo $Sit > rds "; break
                        case "Sit2": sh "set +x; echo $Sit2 > rds "; break
                        case "Sit3": sh "set +x; echo $Sit3 > rds "; break
                        case "Poc": sh "set +x; echo $Poc > rds "; break
                        case "Rtest": sh "set +x; echo $Rtest > rds "; break
                    }
                        sh '''
                            set +x
                            boldon=`tput smso`
                            boldoff=`tput rmso`
                            echo " "
                            echo " "
                            echo "The Environment Selected to Start RDS Instances is ${boldon}DH ${Environments}${boldoff}"
                            echo " "
                            echo " "
                            for i in `cat rds`; do
                                master=`aws rds describe-db-instances --db-instance-identifier $i --query 'DBInstances[].[DBInstanceIdentifier,DBInstanceStatus]' --output text | awk '{print $2}'`
                                if [ "$master" = "stopped" ]; then
                                    aws rds start-db-instance --db-instance-identifier $i --region us-east-1 2>&1 > /dev/null
                                    echo "RDS ${boldon}${i}${boldoff} is ${boldon}Starting${boldoff} Now. Previously, Which was in Stopped State."
                                    echo " "
                                else
                                    echo "RDS ${boldon}${i}${boldoff} is in ${boldon}${master}${boldoff} State, It Needed to be in Stopped State Before Starting Up."
                                    echo " "
                                fi
                            done
                            echo " "
                            echo " "
                   '''
def stage_name = "Start"
def status = "new"
if (params.Components.contains('Start') ) {
post_to_jira(stage_name,status)
                            }
                    }
                }
             }
        }
}

stage('Stopping RDS Instances') {


                script {
                    if (params.Components.contains('Stop')) {
container('sch-code-builder'){
                    // Stage 1: Pull Docker image using AWS credentials
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'aws_jenkins_dev', // Replace with your AWS credentials ID
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    switch(params.Environments) {
                        case "Dev": sh "set +x; echo $Dev > rds "; break
                        case "Dev2": sh "set +x; echo $Dev2 > rds "; break
                        case "Dev3": sh "set +x; echo $Dev2 > rds "; break
                        case "Sit": sh "set +x; echo $Sit > rds "; break
                        case "Sit2": sh "set +x; echo $Sit2 > rds "; break
                        case "Sit3": sh "set +x; echo $Sit3 > rds "; break
                        case "Poc": sh "set +x; echo $Poc > rds "; break
                        case "Rtest": sh "set +x; echo $Rtest > rds "; break
                    }
                        sh '''
                            set +x
                            boldon=`tput smso`
                            boldoff=`tput rmso`
                            echo " "
                            echo " "
                            echo "The Environment Selected to Stop RDS Instances is ${boldon}DH ${Environments}${boldoff}"
                            echo " "
                            echo " "
                            for i in `cat rds`; do
                                master=`aws rds describe-db-instances --db-instance-identifier $i --query 'DBInstances[].[DBInstanceIdentifier,DBInstanceStatus]' --output text | awk '{print $2}'`
    
                                if [ "$master" = "available" ]; then
                                    aws rds stop-db-instance --db-instance-identifier $i --region us-east-1 2>&1 > /dev/null
                                    echo "RDS ${boldon}${i}${boldoff} is ${boldon}Stopping${boldoff} Now. Previously, Which was in Available State."
                                    echo " "
                                else
                                    echo "RDS ${boldon}${i}${boldoff} is in ${boldon}${master}${boldoff} State, It Needed to be in Available State Before Shutting Down."
                                    echo " "
                                fi
                            done
                            echo " "
                            echo " "
                   '''
def stage_name = "Stop"
def status = "new"
if (params.Components.contains('Stop') ) {
post_to_jira(stage_name,status)
                            }
                    }
                }
             }
        }
}

}
}

def post_to_jira(stage_name,status){
            def slackColor = 'ff0000'
def jenkins_url = "https://jenkins.dev.lsacone.com/job/SCH/job/DH-RDS-Start-Stop/"
                    sh '''
export jenkins_url="https://jenkins.dev.lsacone.com/job/SCH/job/DH-RDS-Start-Stop/"
echo $jenkins_url > url.txt
                        cat url.txt | sed -e 's|http://|https://|g' > url_1.txt
                        cat url_1.txt              
                        ls -la
                        curl -s -k -u "$jenkins_cred_text" --request GET "\$(cat url_1.txt)"${BUILD_NUMBER}/consoleText > ${BUILD_NUMBER}_${stage_name}
export output=`cat ${BUILD_NUMBER}_${stage_name} | grep State`
echo $output
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{
                    "text": "Build ${BUILD_URL}! Job: ${currentBuild.fullDisplayName}",
                    "attachments": [
                    {
                        "color": "${slackColor}",
                        "fields": [
                        { "title": "Build Number", "value": ${output}, "short": true },
                        {"title": "Build URL", "value": "${BUILD_URL}", "short": true },
                        { "title": "Build Type", "value": "${stage_name}", "short": true },
                        { "title": "Build Status", "value": "${stage_name}", "short": true }


                        ]
                    }
                    ]
                }' \
                https://hooks.slack.com/services/$client_secret
                '''
}
